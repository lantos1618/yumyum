// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: yumyum.proto

// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc
// go install google.golang.org/protobuf/cmd/protoc-gen-go
// PATH="${PATH}:${HOME}/go/bin"
// protoc --go_out=. --go-grpc_out=. yumyum.proto                                                                             ✔  14:01:41 

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	YumYumService_EmojiChat_FullMethodName = "/reactions.YumYumService/EmojiChat"
)

// YumYumServiceClient is the client API for YumYumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YumYumServiceClient interface {
	EmojiChat(ctx context.Context, opts ...grpc.CallOption) (YumYumService_EmojiChatClient, error)
}

type yumYumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYumYumServiceClient(cc grpc.ClientConnInterface) YumYumServiceClient {
	return &yumYumServiceClient{cc}
}

func (c *yumYumServiceClient) EmojiChat(ctx context.Context, opts ...grpc.CallOption) (YumYumService_EmojiChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &YumYumService_ServiceDesc.Streams[0], YumYumService_EmojiChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &yumYumServiceEmojiChatClient{stream}
	return x, nil
}

type YumYumService_EmojiChatClient interface {
	Send(*Emoji) error
	Recv() (*Emoji, error)
	grpc.ClientStream
}

type yumYumServiceEmojiChatClient struct {
	grpc.ClientStream
}

func (x *yumYumServiceEmojiChatClient) Send(m *Emoji) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yumYumServiceEmojiChatClient) Recv() (*Emoji, error) {
	m := new(Emoji)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YumYumServiceServer is the server API for YumYumService service.
// All implementations must embed UnimplementedYumYumServiceServer
// for forward compatibility
type YumYumServiceServer interface {
	EmojiChat(YumYumService_EmojiChatServer) error
	mustEmbedUnimplementedYumYumServiceServer()
}

// UnimplementedYumYumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYumYumServiceServer struct {
}

func (UnimplementedYumYumServiceServer) EmojiChat(YumYumService_EmojiChatServer) error {
	return status.Errorf(codes.Unimplemented, "method EmojiChat not implemented")
}
func (UnimplementedYumYumServiceServer) mustEmbedUnimplementedYumYumServiceServer() {}

// UnsafeYumYumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YumYumServiceServer will
// result in compilation errors.
type UnsafeYumYumServiceServer interface {
	mustEmbedUnimplementedYumYumServiceServer()
}

func RegisterYumYumServiceServer(s grpc.ServiceRegistrar, srv YumYumServiceServer) {
	s.RegisterService(&YumYumService_ServiceDesc, srv)
}

func _YumYumService_EmojiChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YumYumServiceServer).EmojiChat(&yumYumServiceEmojiChatServer{stream})
}

type YumYumService_EmojiChatServer interface {
	Send(*Emoji) error
	Recv() (*Emoji, error)
	grpc.ServerStream
}

type yumYumServiceEmojiChatServer struct {
	grpc.ServerStream
}

func (x *yumYumServiceEmojiChatServer) Send(m *Emoji) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yumYumServiceEmojiChatServer) Recv() (*Emoji, error) {
	m := new(Emoji)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YumYumService_ServiceDesc is the grpc.ServiceDesc for YumYumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YumYumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reactions.YumYumService",
	HandlerType: (*YumYumServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EmojiChat",
			Handler:       _YumYumService_EmojiChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "yumyum.proto",
}

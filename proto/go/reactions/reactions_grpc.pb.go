// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: reactions.proto

// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc
// go install google.golang.org/protobuf/cmd/protoc-gen-go
// PATH="${PATH}:${HOME}/go/bin"
// protoc --go_out=. --go-grpc_out=. reactions.proto                                                                                ✔  14:01:41 

package reactions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReactionsService_SendEmojiReaction_FullMethodName    = "/reactions.ReactionsService/SendEmojiReaction"
	ReactionsService_ReceiveEmojiReaction_FullMethodName = "/reactions.ReactionsService/ReceiveEmojiReaction"
)

// ReactionsServiceClient is the client API for ReactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReactionsServiceClient interface {
	SendEmojiReaction(ctx context.Context, opts ...grpc.CallOption) (ReactionsService_SendEmojiReactionClient, error)
	ReceiveEmojiReaction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ReactionsService_ReceiveEmojiReactionClient, error)
}

type reactionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReactionsServiceClient(cc grpc.ClientConnInterface) ReactionsServiceClient {
	return &reactionsServiceClient{cc}
}

func (c *reactionsServiceClient) SendEmojiReaction(ctx context.Context, opts ...grpc.CallOption) (ReactionsService_SendEmojiReactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReactionsService_ServiceDesc.Streams[0], ReactionsService_SendEmojiReaction_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &reactionsServiceSendEmojiReactionClient{stream}
	return x, nil
}

type ReactionsService_SendEmojiReactionClient interface {
	Send(*Emoji) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type reactionsServiceSendEmojiReactionClient struct {
	grpc.ClientStream
}

func (x *reactionsServiceSendEmojiReactionClient) Send(m *Emoji) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reactionsServiceSendEmojiReactionClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reactionsServiceClient) ReceiveEmojiReaction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ReactionsService_ReceiveEmojiReactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReactionsService_ServiceDesc.Streams[1], ReactionsService_ReceiveEmojiReaction_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &reactionsServiceReceiveEmojiReactionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReactionsService_ReceiveEmojiReactionClient interface {
	Recv() (*Emoji, error)
	grpc.ClientStream
}

type reactionsServiceReceiveEmojiReactionClient struct {
	grpc.ClientStream
}

func (x *reactionsServiceReceiveEmojiReactionClient) Recv() (*Emoji, error) {
	m := new(Emoji)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReactionsServiceServer is the server API for ReactionsService service.
// All implementations must embed UnimplementedReactionsServiceServer
// for forward compatibility
type ReactionsServiceServer interface {
	SendEmojiReaction(ReactionsService_SendEmojiReactionServer) error
	ReceiveEmojiReaction(*Empty, ReactionsService_ReceiveEmojiReactionServer) error
	mustEmbedUnimplementedReactionsServiceServer()
}

// UnimplementedReactionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReactionsServiceServer struct {
}

func (UnimplementedReactionsServiceServer) SendEmojiReaction(ReactionsService_SendEmojiReactionServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEmojiReaction not implemented")
}
func (UnimplementedReactionsServiceServer) ReceiveEmojiReaction(*Empty, ReactionsService_ReceiveEmojiReactionServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveEmojiReaction not implemented")
}
func (UnimplementedReactionsServiceServer) mustEmbedUnimplementedReactionsServiceServer() {}

// UnsafeReactionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReactionsServiceServer will
// result in compilation errors.
type UnsafeReactionsServiceServer interface {
	mustEmbedUnimplementedReactionsServiceServer()
}

func RegisterReactionsServiceServer(s grpc.ServiceRegistrar, srv ReactionsServiceServer) {
	s.RegisterService(&ReactionsService_ServiceDesc, srv)
}

func _ReactionsService_SendEmojiReaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReactionsServiceServer).SendEmojiReaction(&reactionsServiceSendEmojiReactionServer{stream})
}

type ReactionsService_SendEmojiReactionServer interface {
	SendAndClose(*Empty) error
	Recv() (*Emoji, error)
	grpc.ServerStream
}

type reactionsServiceSendEmojiReactionServer struct {
	grpc.ServerStream
}

func (x *reactionsServiceSendEmojiReactionServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reactionsServiceSendEmojiReactionServer) Recv() (*Emoji, error) {
	m := new(Emoji)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReactionsService_ReceiveEmojiReaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReactionsServiceServer).ReceiveEmojiReaction(m, &reactionsServiceReceiveEmojiReactionServer{stream})
}

type ReactionsService_ReceiveEmojiReactionServer interface {
	Send(*Emoji) error
	grpc.ServerStream
}

type reactionsServiceReceiveEmojiReactionServer struct {
	grpc.ServerStream
}

func (x *reactionsServiceReceiveEmojiReactionServer) Send(m *Emoji) error {
	return x.ServerStream.SendMsg(m)
}

// ReactionsService_ServiceDesc is the grpc.ServiceDesc for ReactionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReactionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reactions.ReactionsService",
	HandlerType: (*ReactionsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEmojiReaction",
			Handler:       _ReactionsService_SendEmojiReaction_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveEmojiReaction",
			Handler:       _ReactionsService_ReceiveEmojiReaction_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "reactions.proto",
}
